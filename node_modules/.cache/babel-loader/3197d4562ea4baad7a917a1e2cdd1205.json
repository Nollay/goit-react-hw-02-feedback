{"ast":null,"code":"var _jsxFileName = \"M:\\\\Git-Hub-repositories\\\\goit-react-hw-02-feedback\\\\src\\\\components\\\\App.jsx\";\nimport React, { Component } from 'react';\nimport { Container } from './feedback/FeedbackStyled';\nimport FeedbackStatistiks from './feedback/FeedbackStatistics';\nimport Feedbacks from './feedback/Feedback';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass App extends Component {\n  constructor() {\n    super(...arguments);\n    this.state = {\n      good: 0,\n      neutral: 0,\n      bad: 0\n    };\n\n    this.changeState = evt => {\n      const key = evt.target.dataset.type;\n      const stateObj = {};\n      stateObj[key] = this.state[key] + 1;\n      this.setState(stateObj);\n    };\n\n    this.countTotalFeedback = (good, neutral, bad) => {\n      return good + neutral + bad;\n    };\n\n    this.countPositiveTotalPercantage = (total, good) => {\n      return total ? Math.ceil(good * 100 / total) : 0;\n    };\n  }\n\n  render() {\n    const good = this.state.good;\n    const neutral = this.state.neutral;\n    const bad = this.state.bad;\n    return /*#__PURE__*/_jsxDEV(Container, {\n      children: [/*#__PURE__*/_jsxDEV(Feedbacks, {\n        options: Object.keys(this.state),\n        changeState: this.changeState\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(FeedbackStats, {\n        good: good,\n        neutral: neutral,\n        bad: bad,\n        total: this.countTotalFeedback(good, neutral, bad),\n        goodPercentage: this.countPositiveTotalPercantage(this.countTotalFeedback(good, neutral, bad), good)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["M:/Git-Hub-repositories/goit-react-hw-02-feedback/src/components/App.jsx"],"names":["React","Component","Container","FeedbackStatistiks","Feedbacks","App","state","good","neutral","bad","changeState","evt","key","target","dataset","type","stateObj","setState","countTotalFeedback","countPositiveTotalPercantage","total","Math","ceil","render","Object","keys"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,SAAT,QAA0B,2BAA1B;AACA,OAAOC,kBAAP,MAA+B,+BAA/B;AACA,OAAOC,SAAP,MAAsB,qBAAtB;;;AAEA,MAAMC,GAAN,SAAkBJ,SAAlB,CAA4B;AAAA;AAAA;AAAA,SAC1BK,KAD0B,GAClB;AACNC,MAAAA,IAAI,EAAE,CADA;AAENC,MAAAA,OAAO,EAAE,CAFH;AAGNC,MAAAA,GAAG,EAAE;AAHC,KADkB;;AAAA,SAM1BC,WAN0B,GAMZC,GAAG,IAAI;AACnB,YAAMC,GAAG,GAAGD,GAAG,CAACE,MAAJ,CAAWC,OAAX,CAAmBC,IAA/B;AACA,YAAMC,QAAQ,GAAG,EAAjB;AACAA,MAAAA,QAAQ,CAACJ,GAAD,CAAR,GAAgB,KAAKN,KAAL,CAAWM,GAAX,IAAkB,CAAlC;AACA,WAAKK,QAAL,CAAcD,QAAd;AACD,KAXyB;;AAAA,SAa1BE,kBAb0B,GAaL,CAACX,IAAD,EAAOC,OAAP,EAAgBC,GAAhB,KAAwB;AAC3C,aAAOF,IAAI,GAAGC,OAAP,GAAiBC,GAAxB;AACD,KAfyB;;AAAA,SAgB1BU,4BAhB0B,GAgBK,CAACC,KAAD,EAAQb,IAAR,KAAiB;AAC9C,aAAOa,KAAK,GAAGC,IAAI,CAACC,IAAL,CAAWf,IAAI,GAAG,GAAR,GAAea,KAAzB,CAAH,GAAqC,CAAjD;AACD,KAlByB;AAAA;;AAoB1BG,EAAAA,MAAM,GAAG;AACP,UAAMhB,IAAI,GAAG,KAAKD,KAAL,CAAWC,IAAxB;AACA,UAAMC,OAAO,GAAG,KAAKF,KAAL,CAAWE,OAA3B;AACA,UAAMC,GAAG,GAAG,KAAKH,KAAL,CAAWG,GAAvB;AACA,wBACE,QAAC,SAAD;AAAA,8BACE,QAAC,SAAD;AACE,QAAA,OAAO,EAAEe,MAAM,CAACC,IAAP,CAAY,KAAKnB,KAAjB,CADX;AAEE,QAAA,WAAW,EAAE,KAAKI;AAFpB;AAAA;AAAA;AAAA;AAAA,cADF,eAKE,QAAC,aAAD;AACE,QAAA,IAAI,EAAEH,IADR;AAEE,QAAA,OAAO,EAAEC,OAFX;AAGE,QAAA,GAAG,EAAEC,GAHP;AAIE,QAAA,KAAK,EAAE,KAAKS,kBAAL,CAAwBX,IAAxB,EAA8BC,OAA9B,EAAuCC,GAAvC,CAJT;AAKE,QAAA,cAAc,EAAE,KAAKU,4BAAL,CACd,KAAKD,kBAAL,CAAwBX,IAAxB,EAA8BC,OAA9B,EAAuCC,GAAvC,CADc,EAEdF,IAFc;AALlB;AAAA;AAAA;AAAA;AAAA,cALF;AAAA;AAAA;AAAA;AAAA;AAAA,YADF;AAkBD;;AA1CyB;;AA4C5B,eAAeF,GAAf","sourcesContent":["import React, { Component } from 'react';\r\nimport { Container } from './feedback/FeedbackStyled';\r\nimport FeedbackStatistiks from './feedback/FeedbackStatistics';\r\nimport Feedbacks from './feedback/Feedback';\r\n\r\nclass App extends Component {\r\n  state = {\r\n    good: 0,\r\n    neutral: 0,\r\n    bad: 0,\r\n  };\r\n  changeState = evt => {\r\n    const key = evt.target.dataset.type;\r\n    const stateObj = {};\r\n    stateObj[key] = this.state[key] + 1;\r\n    this.setState(stateObj);\r\n  };\r\n\r\n  countTotalFeedback = (good, neutral, bad) => {\r\n    return good + neutral + bad;\r\n  };\r\n  countPositiveTotalPercantage = (total, good) => {\r\n    return total ? Math.ceil((good * 100) / total) : 0;\r\n  };\r\n\r\n  render() {\r\n    const good = this.state.good;\r\n    const neutral = this.state.neutral;\r\n    const bad = this.state.bad;\r\n    return (\r\n      <Container>\r\n        <Feedbacks\r\n          options={Object.keys(this.state)}\r\n          changeState={this.changeState}\r\n        ></Feedbacks>\r\n        <FeedbackStats\r\n          good={good}\r\n          neutral={neutral}\r\n          bad={bad}\r\n          total={this.countTotalFeedback(good, neutral, bad)}\r\n          goodPercentage={this.countPositiveTotalPercantage(\r\n            this.countTotalFeedback(good, neutral, bad),\r\n            good\r\n          )}\r\n        ></FeedbackStats>\r\n      </Container>\r\n    );\r\n  }\r\n}\r\nexport default App;\r\n"]},"metadata":{},"sourceType":"module"}