{"ast":null,"code":"var _jsxFileName = \"M:\\\\Git-Hub-repositories\\\\goit-react-hw-02-feedback\\\\src\\\\components\\\\feedback\\\\Feedback.jsx\";\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { ButtonStyled, StyledOptions } from './FeedbackStyled';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default class Feedback extends Component {\n  capitalizeFirstLetter(string) {\n    return string.charAt(0).toUpperCase() + string.slice(1);\n  }\n\n  render() {\n    const {\n      options,\n      changeState\n    } = this.props;\n    return /*#__PURE__*/_jsxDEV(StyledOptions, {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Please leave feedback\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 17,\n        columnNumber: 9\n      }, this), options.map((option, idx) => /*#__PURE__*/_jsxDEV(ButtonStyled, {\n        \"data-type\": option,\n        onClick: changeState,\n        children: this.capitalizeFirstLetter(option)\n      }, idx, false, {\n        fileName: _jsxFileName,\n        lineNumber: 19,\n        columnNumber: 11\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 7\n    }, this);\n  }\n\n}\nFeedback.propTypes = {\n  options: PropTypes.arrayOf(PropTypes.string).isRequired,\n  changeState: PropTypes.func.isRequired\n};","map":{"version":3,"sources":["M:/Git-Hub-repositories/goit-react-hw-02-feedback/src/components/feedback/Feedback.jsx"],"names":["React","Component","PropTypes","ButtonStyled","StyledOptions","Feedback","capitalizeFirstLetter","string","charAt","toUpperCase","slice","render","options","changeState","props","map","option","idx","propTypes","arrayOf","isRequired","func"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,YAAT,EAAuBC,aAAvB,QAA4C,kBAA5C;;AAEA,eAAe,MAAMC,QAAN,SAAuBJ,SAAvB,CAAiC;AAK9CK,EAAAA,qBAAqB,CAACC,MAAD,EAAS;AAC5B,WAAOA,MAAM,CAACC,MAAP,CAAc,CAAd,EAAiBC,WAAjB,KAAiCF,MAAM,CAACG,KAAP,CAAa,CAAb,CAAxC;AACD;;AACDC,EAAAA,MAAM,GAAG;AACP,UAAM;AAAEC,MAAAA,OAAF;AAAWC,MAAAA;AAAX,QAA2B,KAAKC,KAAtC;AACA,wBACE,QAAC,aAAD;AAAA,8BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,EAEGF,OAAO,CAACG,GAAR,CAAY,CAACC,MAAD,EAASC,GAAT,kBACX,QAAC,YAAD;AAAc,qBAAWD,MAAzB;AAAiC,QAAA,OAAO,EAAEH,WAA1C;AAAA,kBACG,KAAKP,qBAAL,CAA2BU,MAA3B;AADH,SAA4DC,GAA5D;AAAA;AAAA;AAAA;AAAA,cADD,CAFH;AAAA;AAAA;AAAA;AAAA;AAAA,YADF;AAUD;;AApB6C;AAA3BZ,Q,CACZa,S,GAAY;AACjBN,EAAAA,OAAO,EAAEV,SAAS,CAACiB,OAAV,CAAkBjB,SAAS,CAACK,MAA5B,EAAoCa,UAD5B;AAEjBP,EAAAA,WAAW,EAAEX,SAAS,CAACmB,IAAV,CAAeD;AAFX,C","sourcesContent":["import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { ButtonStyled, StyledOptions } from './FeedbackStyled';\r\n\r\nexport default class Feedback extends Component {\r\n  static propTypes = {\r\n    options: PropTypes.arrayOf(PropTypes.string).isRequired,\r\n    changeState: PropTypes.func.isRequired,\r\n  };\r\n  capitalizeFirstLetter(string) {\r\n    return string.charAt(0).toUpperCase() + string.slice(1);\r\n  }\r\n  render() {\r\n    const { options, changeState } = this.props;\r\n    return (\r\n      <StyledOptions>\r\n        <h2>Please leave feedback</h2>\r\n        {options.map((option, idx) => (\r\n          <ButtonStyled data-type={option} onClick={changeState} key={idx}>\r\n            {this.capitalizeFirstLetter(option)}\r\n          </ButtonStyled>\r\n        ))}\r\n      </StyledOptions>\r\n    );\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}